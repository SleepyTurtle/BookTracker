@page "/books"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BookTracker.Entities
@using BookTracker.Data
@using System.Collections
@implements IAsyncDisposable
@inject IDbContextFactory<BookTracker.Data.BookTrackerContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<div>
    <form action="/books?titleFilter=" data-enhance>
        <input type="search" name="titleFilter" />
        <input type="submit" value="Search by Title" />
    </form>
</div>

<p>
    <a href="books/create">Create New</a>
</p>

<QuickGrid Class="table" Items="FilteredBooks">
    <PropertyColumn Property="book => book.Title" />
    <PropertyColumn Property="book => book.Description" class="w-40"/>
    <PropertyColumn Property="book => book.Author" />
    <PropertyColumn Property="book => book.DateAdded" />
    <PropertyColumn Property="book => book.Publisher" />

    <TemplateColumn Context="book">
        <a href="@($"books/edit?id={book.Id}")">Edit</a> |
        <a href="@($"books/details?id={book.Id}")">Details</a> |
        <a href="@($"books/delete?id={book.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private BookTrackerContext context = default!;

    [SupplyParameterFromQuery]
    private string? titleFilter { get; set; }

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    private IQueryable<Book> FilteredBooks => 
	    context.Book.Where(book => book.Title.Contains(titleFilter));

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
