@page "/books"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using BookTracker.Entities
@using BookTracker.Data
@using System.Collections
@implements IAsyncDisposable
@inject IDbContextFactory<BookTracker.Data.BookTrackerContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="books/create">Create New</a>
</p>

<QuickGrid Class="table" Items="FilteredBooks">
    <PropertyColumn Property="book => book.Title" />
    <PropertyColumn Property="book => book.Description" />
    <PropertyColumn Property="book => book.Author" />
    <PropertyColumn Property="book => book.DateAdded" />
    <PropertyColumn Property="book => book.Publisher" />

    <TemplateColumn Context="book">
        <a href="@($"books/edit?id={book.Id}")">Edit</a> |
        <a href="@($"books/details?id={book.Id}")">Details</a> |
        <a href="@($"books/delete?id={book.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private BookTrackerContext context = default!;
    private IQueryable<Book> Books = Enumerable.Empty<Book>().AsQueryable();
    private IQueryable<Book> FilteredBooks = Enumerable.Empty<Book>().AsQueryable();

    protected override async Task OnInitializedAsync()
    {
        context = await DbFactory.CreateDbContextAsync();
        Books = context.Book.AsQueryable();
        FilteredBooks = Books;
    }

    public async ValueTask DisposeAsync(){
        if (context is not null)
        {
            await context.DisposeAsync();
        }
    }
}
